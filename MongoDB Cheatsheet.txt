https://www.mongodb.com/developer/products/mongodb/cheat-sheet/

----- Connect mongoDB shell -----------

>>mongo   
# connects to mongodb://127.0.0.1:27017 by default

>>mongo --host <host> --port <port> -u <user> -p <pwd> 
# omit the password if you want a prompt

>>mongo "mongodb://192.168.1.1:27017"
>>mongo "mongodb+srv://cluster-name.abcde.mongodb.net/<dbname>" --username <username> 
# MongoDB Atlas

------- Show Databases -----

>>show dbs


-------- Switch or create database -------

>> use <db name>

--------Show Collections ----------

>> show collections



--------- CRUD -----------

----- CREATE ------

>>db.coll.insertOne({name: "Max"})

>>db.coll.insert([{name: "Max"}, {name:"Alex"}]) 
// ordered bulk insert

>>db.coll.insert([{name: "Max"}, {name:"Alex"}], {ordered: false}) 
// unordered bulk insert

>>db.coll.insert({date: ISODate()})
//insert date

>>db.coll.insert({name: "Max"}, {"writeConcern": {"w": "majority", "wtimeout": 5000}})


------ READ -------------


>>db.coll.findOne() 
// returns a single document

>>db.coll.find()    
// returns a cursor - show 20 results - "it" to display more

>>db.coll.find().pretty()
//prettified

>>db.coll.find({name: "Max", age: 32}) 
// implicit logical "AND". display documents where name=max and age=32

>>db.student.find({})
//get all documents from collection, select * from student

>>db.student.find({},{roll:1})
//get only roll no of students, _id will be returned by default: select _id, roll from student

>>db.student.find({}, {roll:1, _id:0})
//select roll from student

>>db.coll.find({date: ISODate("2020-09-25T13:57:17.180Z")})

>>db.coll.find({name: "Max", age: 32}).explain("executionStats") 
// or "queryPlanner" or "allPlansExecution"

>>db.coll.distinct("name")
//return array of all distinct names from all documents of that collection 

>>db.coll.count({age: 32})          
// estimation based on collection metadata

>>db.coll.estimatedDocumentCount()  
// estimation based on collection metadata

>>db.coll.countDocuments({age: 32}) 
// alias for an aggregation pipeline - accurate count


//sort
>> db.coll.find().sort({age:1})
//sort by age in ascending order

>> db.coll.find().sort({age:-1})
//sort by age in descending order



// Comparison

>>db.coll.find({"year": {$gt: 1970}})
//gt means greater than

>>db.coll.find({"year": {$gte: 1970}})

>>db.coll.find({"year": {$lt: 1970}})

>>db.coll.find({"year": {$lte: 1970}})

>>db.coll.find({"year": {$ne: 1970}})

>>db.coll.find({"year": {$in: [1958, 1959]}})

>>db.coll.find({"year": {$nin: [1958, 1959]}})


// Logical
>>db.coll.find({name:{$not: {$eq: "Max"}}})

>>db.coll.find({$or: [{"year" : 1958}, {"year" : 1959}]})

>>db.coll.find({$nor: [{price: 1.99}, {sale: true}]})


// Regex
>>db.coll.find({name: /^Max/})   // regex: starts by letter "M"
>>db.coll.find({name: /^Max$/i}) // regex case insensitive


>>db.coll.find({
  $and: [
    {$or: [{qty: {$lt :10}}, {qty :{$gt: 50}}]},
    {$or: [{sale: true}, {price: {$lt: 5 }}]}
  ]
})
 

// Element
>>db.coll.find({name: {$exists: true}})
>>db.coll.find({"zipCode": {$type: 2 }})
>>db.coll.find({"zipCode": {$type: "string"}})


// Aggregation Pipeline
db.coll.aggregate([
  {$match: {status: "A"}},
  {$group: {_id: "$cust_id", total: {$sum: "$amount"}}},
  {$sort: {total: -1}}
])


// Text search with a "text" index
db.coll.find({$text: {$search: "cake"}}, {score: {$meta: "textScore"}}).sort({score: {$meta: "textScore"}})


// Array
db.coll.find({tags: {$all: ["Realm", "Charts"]}})
db.coll.find({field: {$size: 2}}) // impossible to index - prefer storing the size of the array & update it
db.coll.find({results: {$elemMatch: {product: "xyz", score: {$gte: 8}}}})


// Projections
db.coll.find({"x": 1}, {"actors": 1})               // actors + _id
db.coll.find({"x": 1}, {"actors": 1, "_id": 0})     // actors
db.coll.find({"x": 1}, {"actors": 0, "summary": 0}) // all but "actors" and "summary"

// Sort, skip, limit
db.coll.find({}).sort({"year": 1, "rating": -1}).skip(10).limit(3)

// Read Concern
db.coll.find().readConcern("majority")



--------- UPDATE --------

>>db.coll.update({"_id": 1}, {"year": 2016}) 
// WARNING! Replaces the entire document, not just that field

>>db.coll.update({"_id": 1}, {$set: {"year": 2016, name: "Max"}})
//update the first matching document, and set year, name fields only

>>db.coll.update({"_id": 1}, {$unset: {"year": 1}})

>>db.coll.update({"_id": 1}, {$rename: {"year": "date"} })
//rename year field to date

>>db.coll.update({"_id": 1}, {$inc: {"year": 5}})
//increase year by 5

>>db.coll.update({"_id": 1}, {$mul: {price: NumberDecimal("1.25"), qty: 2}})
>>db.coll.update({"_id": 1}, {$min: {"imdb": 5}})
>>db.coll.update({"_id": 1}, {$max: {"imdb": 8}})
>>db.coll.update({"_id": 1}, {$currentDate: {"lastModified": true}})
>>db.coll.update({"_id": 1}, {$currentDate: {"lastModified": {$type: "timestamp"}}})

// Array
db.coll.update({"_id": 1}, {$push :{"array": 1}})
db.coll.update({"_id": 1}, {$pull :{"array": 1}})
db.coll.update({"_id": 1}, {$addToSet :{"array": 2}})
db.coll.update({"_id": 1}, {$pop: {"array": 1}})  // last element
db.coll.update({"_id": 1}, {$pop: {"array": -1}}) // first element
db.coll.update({"_id": 1}, {$pullAll: {"array" :[3, 4, 5]}})
db.coll.update({"_id": 1}, {$push: {scores: {$each: [90, 92, 85]}}})
db.coll.updateOne({"_id": 1, "grades": 80}, {$set: {"grades.$": 82}})
db.coll.updateMany({}, {$inc: {"grades.$[]": 10}})
db.coll.update({}, {$set: {"grades.$[element]": 100}}, {multi: true, arrayFilters: [{"element": {$gte: 100}}]})

// Update many
db.coll.update({"year": 1999}, {$set: {"decade": "90's"}}, {"multi":true})

db.coll.updateMany({"year": 1999}, {$set: {"decade": "90's"}})
//update all fields with year=1999

// FindOneAndUpdate
db.coll.findOneAndUpdate({"name": "Max"}, {$inc: {"points": 5}}, {returnNewDocument: true})

// Upsert
db.coll.update({"_id": 1}, {$set: {item: "apple"}, $setOnInsert: {defaultQty: 100}}, {upsert: true})

// Replace
db.coll.replaceOne({"name": "Max"}, {"firstname": "Maxime", "surname": "Beugnet"})

// Save
db.coll.save({"item": "book", "qty": 40})

// Write concern
db.coll.update({}, {$set: {"x": 1}}, {"writeConcern": {"w": "majority", "wtimeout": 5000}})



------- DELETE ----------

>>db.coll.remove({name: "Max"})
//remove docs with name=Max

>>db.coll.remove({name: "Max"}, {justOne: true})
>>db.coll.remove({}) 
// WARNING! Deletes all the docs but not the collection itself and its index definitions

>>db.coll.remove({name: "Max"}, {"writeConcern": {"w": "majority", "wtimeout": 5000}})
>>db.coll.findOneAndDelete({"name": "Max"})



---------- DROP DB and COLLECTIONS ----------

>>db.coll.drop()    // removes the collection and its index definitions
>>db.dropDatabase() // double check that you are *NOT* on the PROD cluster... :-)



------- Create collection ----------

>>db.createCollection("contacts")



---------- Other Collection Functions -----------

db.coll.stats()
db.coll.storageSize()
db.coll.totalIndexSize()
db.coll.totalSize()
db.coll.validate({full: true})
db.coll.renameCollection("new_coll", true) // 2nd parameter to drop the target collection if exists



----------- List Indexes -------------

db.coll.getIndexes()
db.coll.getIndexKeys()



---------- Create Indexes -------------

// Index Types
db.coll.createIndex({"name": 1})                // single field index
db.coll.createIndex({"name": 1, "date": 1})     // compound index
db.coll.createIndex({foo: "text", bar: "text"}) // text index
db.coll.createIndex({"$**": "text"})            // wildcard text index
db.coll.createIndex({"userMetadata.$**": 1})    // wildcard index
db.coll.createIndex({"loc": "2d"})              // 2d index
db.coll.createIndex({"loc": "2dsphere"})        // 2dsphere index
db.coll.createIndex({"_id": "hashed"})          // hashed index

// Index Options
db.coll.createIndex({"lastModifiedDate": 1}, {expireAfterSeconds: 3600})      // TTL index
db.coll.createIndex({"name": 1}, {unique: true})
db.coll.createIndex({"name": 1}, {partialFilterExpression: {age: {$gt: 18}}}) // partial index
db.coll.createIndex({"name": 1}, {collation: {locale: 'en', strength: 1}})    // case insensitive index with strength = 1 or 2
db.coll.createIndex({"name": 1 }, {sparse: true})


-------- drop indexes ----------
db.coll.dropIndex("name_1")


-------------- Hide/Unhide Indexes -----------

db.coll.hideIndex("name_1")
db.coll.unhideIndex("name_1")



------------- Handy commands --------------

use admin
db.createUser({"user": "root", "pwd": passwordPrompt(), "roles": ["root"]})
db.dropUser("root")
db.auth( "user", passwordPrompt() )

use test
db.getSiblingDB("dbname")
db.currentOp()
db.killOp(123) // opid

db.fsyncLock()
db.fsyncUnlock()

db.getCollectionNames()
db.getCollectionInfos()
db.printCollectionStats()
db.stats()

db.getReplicationInfo()
db.printReplicationInfo()
db.isMaster()
db.hostInfo()
db.printShardingStatus()
db.shutdownServer()
db.serverStatus()

db.setSlaveOk()
db.getSlaveOk()

db.getProfilingLevel()
db.getProfilingStatus()
db.setProfilingLevel(1, 200) // 0 == OFF, 1 == ON with slowms, 2 == ON

db.enableFreeMonitoring()
db.disableFreeMonitoring()
db.getFreeMonitoringStatus()

db.createView("viewName", "sourceColl", [{$project:{department: 1}}])



-------******************-----------------










